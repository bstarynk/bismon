// in body €_3DcbHfTP2t of emit_xhtml function €_8IYFtn8, after the debug start
// arguments of emit_xhtml: [v_html o_emitctx o_strbuf v_depth]
// locals of emit_xhtml: {o_conn o_html v_comp v_resapp v_resemit o_spacing v_clos}
// numbers of emit_xhtml: {i_depth ii leni}

/// that was never added, up to commit 5c78727ecfb881045e2037 on Jan 18
/// we really want to emit XHTML5 ; should also look into MathML & mathjax.org

// replace the €_2Pz8uFijO empty cond placeholder on v_html // emit_xhtml
//
,put _3DcbHfTP2te_8Zw8Uhy9eU6 4

$[^cond (

$[^when (*is_stringv (v_html)
  $[^out (o_strbuf *html_enc(v_html)) !:comment "emit html-encoded v_html string"]
 ) !:comment "when v_html is string"]

$[^when (*is_intv (v_html)
  $[^out (o_strbuf *int(*val_to_int(v_html))) !:comment "emit integer v_html"]
 ) !:comment "when v_html is int"]

$[^when (*is_null (v_html)
 $[^no_op () !:comment "no_op for null"]
) !:comment "when v_html is null noop"]

$[^when (*is_doublev (v_html)
  $[^out (o_strbuf *double_plain(*val_to_double(v_html))) !:comment "emit double v_html"]
 ) !:comment "when v_html is double"]


$[^when (*is_objectv(v_html)
 $[^assign (o_html *val_to_object(v_html)) !:comment "o_html := v_html"]
 $[^objswitch (o_html
 $[^when (newline
  $[^out (o_strbuf *newline()) !:comment "emit-newline"]
  ) !:comment "when newline"]
 $[^when (nlsp
  $[^out (o_strbuf *nlsp()) !:comment "emit-nl/sp"]
  ) !:comment "when nlsp"]
 $[^when (space
  $[^out (o_strbuf *space()) !:comment "emit-space"]
  ) !:comment "when space"]

 /// else
 $[^lockobj (o_html

   $[^run ( #{/*debug emit_xhtml object o_html o_emitctx o_strbuf depth*/
   DBGPRINTF_BM("emit_xhtml object €%.9s o_html=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
   "$stmtid",
   objectdbg_BM($o_html),
   objectdbg1_BM($o_emitctx),
   objectdbg2_BM($o_strbuf),
   objstrbufferlengthpayl_BM($o_strbuf),
   (long int) ($i_depth));
   }# ) !:comment "debug emit_xhtml object o_html o_emitctx o_strbuf depth"]

   $[^cond (

   /// we did introduce some html_void_element_object
   /// for HTML elements like <br /> or <hr />
   
   //////////////////////////////////
   $[^when (*objectisinstance (o_html !html_void_element_object)
   /// emitxtml_void_html_element == _0FRLxSGQlZ0_0qrrUZlEeKp
   $[^assign(v_resemit *apply (! _0FRLxSGQlZ0_0qrrUZlEeKp  o_html o_emitctx o_strbuf *taggedint(i_depth)))
    !:comment "v_resemit := emitxhtml_void_element (o_html o_emitctx o_strbuf depth) // emit_xhtml"]

   $[^run ( #{/*debug emit_xhtml after emitxhtml_void_element v_resemit o_html o_emitctx o_strbuf depth*/
   DBGPRINTF_BM("emit_xhtml after emitxhtml_void_element €%.9s v_resemit=%s o_html=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
   "$stmtid",
   OUTSTRVALUE_BM($v_resemit),
   objectdbg_BM($o_html),
   objectdbg1_BM($o_emitctx),
   objectdbg2_BM($o_strbuf),
   objstrbufferlengthpayl_BM($o_strbuf),
   (long int) ($i_depth));
   }# ) !:comment "debug emit_xhtml after emitxhtml_void_element v_resemit o_html o_emitctx o_strbuf depth"]

   $[^cond (
     $[^when (*is_null (v_resemit)
       $[^fail (*make_node (! failure_miss ! _0FRLxSGQlZ0_0qrrUZlEeKp !emit_xhtml o_html o_emitctx o_strbuf *taggedint(i_depth) ))
         !:comment "fail-miss emitxhtml_void_element emit_xhtml o_html o_emitctx o_strbuf depth"]
       ) !:comment "when v_resemit is null, fail / emit_xhtml after emitxhtml_void_element"]
   ) !:comment "if v_resemit is null, fail / emit_xhtml after emitxhtml_void_element"]

   $[^return (v_resemit) !:comment "return v_resemit // emit_xhtml after emitxhtml_void_element"]
   
   ) !:comment "when o_html is a html_void_element_object"]


   ////////////////////////////////
   $[^when (*objectisinstance (o_html !html_element_object)
   /// emitxhtml_element == _5NH940lCHYJ_3nuRm3flnzc
   $[^assign(v_resemit *apply (! _5NH940lCHYJ_3nuRm3flnzc  o_html o_emitctx o_strbuf *taggedint(i_depth)))
    !:comment "v_resemit := emitxhtml_element (o_html o_emitctx o_strbuf depth) // emit_xhtml"]
   $[^run ( #{/*debug emit_xhtml after emitxhtml_element v_resemit o_html o_emitctx o_strbuf depth*/
   DBGPRINTF_BM("emit_xhtml after emitxhtml_element €%.9s v_resemit=%s o_html=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
   "$stmtid",
   OUTSTRVALUE_BM($v_resemit),
   objectdbg_BM($o_html),
   objectdbg1_BM($o_emitctx),
   objectdbg2_BM($o_strbuf),
   objstrbufferlengthpayl_BM($o_strbuf),
   (long int) ($i_depth));
   }# ) !:comment "debug emit_xhtml after emitxhtml_element v_resemit o_html o_emitctx o_strbuf depth"]

   $[^cond (
     $[^when (*is_null (v_resemit)
       $[^fail(*make_node (!failure_miss !_5NH940lCHYJ_3nuRm3flnzc !emit_xhtml o_html o_emitctx o_strbuf *taggedint(i_depth)))
         !:comment "fail-miss emitxhtml_element emit_xhtml o_html o_emitctx o_strbuf depth"]
       ) !:comment "when v_resemit is null, fail / emit_xhtml after emitxhtml_element"]
   ) !:comment "if v_resemit is null, fail / emit_xhtml after emitxhtml_element"]
   
   $[^return (v_resemit) !:comment "return v_resemit // emit_xhtml after emitxhtml_element"]

   ) !:comment "when o_html is a html_element_object"]

   ////////////////////////////////
   $[^when (*objectisinstance (o_html !html_sequence_object)
     $[^assign (o_spacing *object_cast (*send (o_html !html_spacing o_emitctx *taggedint(i_depth))))
      !:comment "o_spacing := o_html.html_spacing(o_emitctx depth) // emit_xhtml for html_sequence_object"]

     $[^assign (leni *objnbcomps(o_html)) !:comment "leni := objnbcomps(o_html) // emit_xhtml for html_sequence_object"]
     $[^run ( #{/*debug emit_xhtml html_sequence_object o_html leni o_spacing o_emitctx o_strbuf depth*/
     DBGPRINTF_BM("emit_xhtml html_sequence_object  €%.9s o_html=%s leni#%ld o_spacing=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
     "$stmtid",
     objectdbg_BM($o_html),
     (long int) ($leni),
     objectdbg1_BM($o_spacing),
     objectdbg2_BM($o_emitctx),
     objectdbg3_BM($o_strbuf),
     objstrbufferlengthpayl_BM($o_strbuf),
     (long int) ($i_depth));
     }# ) !:comment "debug emit_xhtml html_sequence_object o_html leni o_spacing o_emitctx o_strbuf depth"]

     /// for each component, emit_xhtml it with depth+1..
     $[^for_up (ii leni
       $[^cond (
         $[^when (
	   *and_then (*greater_int (ii 0) o_spacing)
	   $[^objswitch (o_spacing
	     $[^when (space
	       $[^out (o_strbuf *space()) !:comment "emit-space/ emit_xhtml html_sequence_object"]
	     ) !:comment "when o_spacing is space // emit_xhtml html_sequence_object"]
	     $[^when (newline
	       $[^out (o_strbuf *newline()) !:comment "emit-newline/ emit_xhtml html_sequence_object"]
	     ) !:comment "when o_spacing is newline // emit_xhtml html_sequence_object"]
	     $[^when (nlsp
	       $[^out (o_strbuf *nlsp()) !:comment "emit-nl/sp/ emit_xhtml html_sequence_object"]
	     ) !:comment "when o_spacing is nlsp // emit_xhtml html_sequence_object"]
	   ) !:comment "objswitch o_spacing  // emit_xhtml for html_sequence_object"]
	 ) !:comment "when ii>0 && o_spacing // emit_xhtml for html_sequence_object"]
       ) !:comment "if ii>0 && o_spacing use it // emit_xhtml for html_sequence_object"]
       
       $[^assign (v_comp *objgetcomp(o_html ii)) !:comment "v_comp := o_html[ii] // emit_xhtml for html_sequence_object"]
     $[^run ( #{/*debug emit_xhtml html_sequence_object ii v_comp o_html o_emitctx o_strbuf depth*/
     DBGPRINTF_BM("emit_xhtml html_sequence_object €%.9s ii#%ld v_comp=%s o_html=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
     "$stmtid",
     (long int) ($ii),
     OUTSTRVALUE_BM($v_comp),
     objectdbg_BM($o_html),
     objectdbg1_BM($o_emitctx),
     objectdbg2_BM($o_strbuf),
     objstrbufferlengthpayl_BM($o_strbuf),
     (long int) ($i_depth));
     }# ) !:comment "debug emit_xhtml html_sequence_object ii v_comp o_html o_emitctx o_strbuf depth"]
     
      $[^assign(v_resemit *apply (!emit_xhtml v_comp o_emitctx o_strbuf *taggedint(*add_int(i_depth 1))))
         !:comment "v_resemit := emit_xhtml (v_comp o_emitctx o_strbuf depth+1) // emit_xhtml for html_sequence_object"]
   $[^run ( #{/*debug emit_xhtml for html_sequence_object v_resemit v_comp ii o_html o_emitctx o_strbuf depth*/
   DBGPRINTF_BM("emit_xhtml for html_sequence_object €%.9s v_resemit=%s v_comp=%s ii#%ld o_html=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
   "$stmtid",
   OUTSTRVALUE_BM($v_resemit),
   OUTSTRVALUE_BM($v_comp),
   (long int) ($ii),
   objectdbg_BM($o_html),
   objectdbg1_BM($o_emitctx),
   objectdbg2_BM($o_strbuf),
   objstrbufferlengthpayl_BM($o_strbuf),
   (long int) ($i_depth));
   }# ) !:comment "debug emit_xhtml for html_sequence_object v_resemit v_comp ii o_html o_emitctx o_strbuf depth"]

   $[^cond (
     $[^when (*is_null (v_resemit)
       $[^fail(*make_node (!failure_miss !emit_xhtml !html_sequence_object v_comp *taggedint(ii) o_html o_emitctx o_strbuf *taggedint(i_depth)))
         !:comment "fail-miss emit_xhtml html_sequence_object v_comp ii o_html o_emitctx o_strbuf depth"]
       ) !:comment "when v_resemit is null, fail / emit_xhtml after emitxhtml_element"]
   ) !:comment "if v_resemit is null, fail / emit_xhtml after emitxhtml_element"]
    
     ) !:comment "for ii upto leni // emit_xhtml for html_sequence_object"]
     
   $[^return (v_resemit) !:comment "return o_html // emit_xhtml for html_sequence_object"]

   ) !:comment "when o_html is a html_sequence_object"]

   ////////////////
   /// otherwise, get the emit_xhtml slot of that object into v_clos....
   $[^assign (v_clos *objgetattr(o_html !emit_xhtml)) !:comment "v_clos := objgetattr(o_html emit_xhtml) / emit_xhtml"]

   $[^cond (
     $[^when (v_clos
     $[^run ( #{/*emit_xhtml ordinary v_clos o_html o_emitctx o_strbuf depth*/
       DBGPRINTF_BM("emit_xhtml €%.9s ordinary v_clos=%s o_html=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
        "$stmtid",
        OUTSTRVALUE_BM($v_clos),
        objectdbg_BM($o_html),  objectdbg1_BM($o_emitctx),
        objectdbg2_BM($o_strbuf),  objstrbufferlengthpayl_BM($o_strbuf),
        (long int) ($i_depth));
   }# ) !:comment "debug emit_xhtml ordinary v_clos o_html o_emitctx o_strbuf depth"]
      $[^assign(v_resemit *apply (v_clos o_html o_emitctx o_strbuf *taggedint(*add_int(i_depth 1))))
         !:comment "v_resemit := v_clos (o_html o_emitctx o_strbuf depth+1) // emit_xhtml for ordinary with v_clos"]
     $[^run ( #{/*emit_xhtml ordinary v_resemit o_html o_emitctx o_strbuf depth*/
       DBGPRINTF_BM("emit_xhtml €%.9s ordinary v_resemit=%s o_html=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
        "$stmtid",
        OUTSTRVALUE_BM($v_resemit),
        objectdbg_BM($o_html),  objectdbg1_BM($o_emitctx),
        objectdbg2_BM($o_strbuf),   objstrbufferlengthpayl_BM($o_strbuf),
        (long int) ($i_depth));
   }# ) !:comment "debug emit_xhtml ordinary v_resemit o_html o_emitctx o_strbuf depth"]
   $[^cond (
     $[^when (*is_null (v_resemit)
       $[^fail(*make_node (!failure_miss !emit_xhtml v_clos o_html o_emitctx o_strbuf *taggedint(i_depth)))
         !:comment "fail-miss emit_xhtml v_clos o_html o_emitctx o_strbuf depth"]
       ) !:comment "when v_resemit is null, fail / emit_xhtml ordinary with v_clos"]
   ) !:comment "if v_resemit is null, fail / emit_xhtml after emitxhtml_element"]
     ) !:comment "when v_clos exists from o_html.emit_xhtml in emit_xhtml"]

     $[^out (o_strbuf *object(o_html)) !:comment "else emit object o_html // emit_xhtml"]
   ) !:comment "else .... cond if v_clos in emit_xhtml for ordinary object o_html"]


   ) !:comment "cond on o_html ... in emit_xhtml"]
 ) !:comment "otherwise lock o_html ... in emit_xhtml"]
 
 ) !:comment "objswitch o_html ... in emit_xhtml"]

) !:comment "when v_html is an object... in emit_xhtml"]

///////
$[^when (*isnode (v_html)
 $[^assign (o_conn *nodeconn(v_html)) !:comment "o_conn := nodeconn(v_html)"]
     $[^run ( #{/*emit_xhtml node v_html o_conn o_emitctx o_strbuf depth*/
       DBGPRINTF_BM("emit_xhtml €%.9s node v_html=%s o_conn=%s o_emitctx=%s o_strbuf=%s/L%u depth#%ld",
        "$stmtid",
        OUTSTRVALUE_BM($v_html),
        objectdbg_BM($o_conn),  objectdbg1_BM($o_emitctx),
        objectdbg2_BM($o_strbuf),   objstrbufferlengthpayl_BM($o_strbuf),
        (long int) ($i_depth));
   }# ) !:comment "debug emit_xhtml node v_html o_conn o_emitctx o_strbuf depth"]
 /// should handle {buffer c_enc comment hexa  html_enc id int object octa raw_string sequence utf8_enc}
 )
 ] // end when v_html is a node

//////
 $[^fail (*make_node (!failure_type_error !emit_xhtml v_html o_emitctx o_strbuf *taggedint(i_depth)))
  !:comment "else fail-typeerror emit_xhtml v_html o_emitctx o_strbuf depth"]
  
) !:comment "cond on v_html in emit_xhtml"]
